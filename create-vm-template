#!/usr/bin/env bash

DIR=$(dirname "${BASH_SOURCE[0]}")

# shellcheck source="./bootstrap.sh"
source "${DIR}/bootstrap.sh"

NETWORK="${NETWORK:-vmbr0}"
MEMORY="${MEMORY:-1024}"
CORES="${CORES:-2}"
CPU="${CPU:-host}"
DISTRO="${DISTRO:-debian/11}"
STORAGE="${STORAGE:-undefined}"
STORAGE_AMT="${STORAGE_AMT:-8G}"
VM_USER="${VM_USER:-ken}"
OS_TYPE="${HOST_TYPE:-l26}"
HOST_TYPE="${HOST_TYPE:-host}"
SSH_KEYFILE="${SSH_KEYFILE:-/etc/pve/priv/authorized_keys}"
PASSWORD="${PASSWORD:-do-not-use}"

DEBIAN_10="${DEBIAN_10:-debian-10-genericcloud-amd64.qcow2}"
DEBIAN_11="${DEBIAN_11:-debian-11-genericcloud-amd64.qcow2}"
DEBIAN_12="${DEBIAN_12:-debian-12-genericcloud-amd64-daily.qcow2}"
UBUNTU_20_4="${UBUNTU_20_4:-ubuntu-20.04-server-cloudimg-amd64.img}"
UBUNTU_22_4="${UBUNTU_22_4:-ubuntu-22.04-server-cloudimg-amd64.img}"
UBUNTU_23_4="${UBUNTU_23_4:-lunar-server-cloudimg-amd64.img}"
FEDORA_37="${FEDORA_37:-Fedora-Cloud-Base-37-1.7.x86_64.raw.xz}"
CENTOS_8="${CENTOS_8:-CentOS-Stream-GenericCloud-8-latest.x86_64.qcow2}"
CENTOS_9="${CENTOS_9:-CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2}"


function download_cloud_image() {
    local -r distro="${1:?no distro was passed to get_cloud_image}"

    case $distro in 

        "debian/10") 
            if ! file_exists "${DEBIAN_10}"; then
                log "Downloading cloud image"
                wget "https://cloud.debian.org/images/cloud/buster/latest/${DEBIAN_10}"
            fi
            echo "${DEBIAN_10}"
            return 0
            ;;
        "debian/11")
            if ! file_exists "${DEBIAN_11}"; then
                log "Downloading cloud image"
                wget "https://cloud.debian.org/images/cloud/bullseye/latest/${DEBIAN_11}"
            fi
            echo "${DEBIAN_11}"
            return 0
            ;;

        "debian/12")
            if ! file_exists "${DEBIAN_12}"; then
                log "Downloading cloud image"
                wget "https://cloud.debian.org/images/cloud/bookworm/daily/latest/${DEBIAN_12}"
            fi
            echo "${DEBIAN_12}"
            return 0
            ;;

        "ubuntu/20_04")
            if ! file_exists "${UBUNTU_20_4}"; then
                log "Downloading cloud image"
                wget "https://cloud-images.ubuntu.com/releases/focal/release/${UBUNTU_20_4}"
            fi
            echo "${UBUNTU_20_4}"
            return 0
            ;;

        "ubuntu/22_04")
            if ! file_exists "${UBUNTU_22_4}"; then
                log "Downloading cloud image"
                wget "https://cloud-images.ubuntu.com/releases/22.04/release/${UBUNTU_22_4}"
            fi
            echo "${UBUNTU_22_4}"
            return 0
            ;;

        "ubuntu/23_04")
            if ! file_exists "${UBUNTU_23_4}"; then
                log "Downloading cloud image"
                wget "https://cloud-images.ubuntu.com/lunar/current/${UBUNTU_23_4}"
            fi
            echo "${UBUNTU_23_4}"
            return 0
            ;;

        "fedora/37")
            if ! file_exists "${FEDORA_37}"; then
                wget "https://download.fedoraproject.org/pub/fedora/linux/releases/37/Cloud/x86_64/images/${FEDORA_37}"
            fi
            echo "${FEDORA_37}"
            return 0
            ;;

        "centos/8")
            if ! file_exists "${CENTOS_8}"; then
                log "Downloading cloud image"
                wget "https://cloud.centos.org/centos/8-stream/x86_64/images/${CENTOS_8}"
            fi
            echo "${CENTOS_8}"
            return 0
            ;;        

        "centos/9")
            if ! file_exists "${CENTOS_9}"; then
                log "Downloading cloud image"
                wget "https://cloud.centos.org/centos/9-stream/x86_64/images/${CENTOS_9}"
            fi
            echo "${CENTOS_9}"
            return 0
            ;;

        *)
            error "\"${1}\" is an unknown distribution"
            return 1
            ;;
    esac
}


function vm_name() {
    local -r distro="${1:?no distro was passed to vm_name}"
    local name=""
    name="${distro//\//-}"
    name="${name//_/-}"
    echo "${name}-template"
}


# create_template <[id]> <[distro]>
#
# Creates a reusable VM template on a given PVE host. The ID and distro can be passed in but
# if not present will be solicited interactively.
function create_template() {
    local vm_id="${1:-undefined}"
    local distro="${2:-undefined}"
    local vm_name="${3:-undefined}"
    local storage_vol="${STORAGE:-undefined}"
    local -A ask_vm_id
    catch_errors

    # local cancelled="false"

    if [[ "${vm_id}" == "undefined" ]]; then
        SUGGEST=$(pvesh get /cluster/nextid)
        # shellcheck disable=SC2034
        ask_vm_id=(
            [title]="What container ID would you like to use?\n\nThe lowest available ID in the cluster is ${SUGGEST}."
            [backmsg]="Cloud VM Template for Proxmox Node"
            [height]=14 
            [width]=60
            [ok]="Ok"
            [cancel]="Exit"
        )
        vm_id="$(ask_inputbox ask_vm_id)"

        if [[ $vm_id == "${CANCELLED}" ]]; then
            clear
            log "${RED}Cancelled${RESET} the creation of a VM template. Return whenever you like."
            log ""
            exit 0
        else 
            log "- the container ID will be ${vm_id}"
        fi
    else
        log "- the container ID was passed in as a CLI argument: ${vm_id}"
    fi

    if [[ "${distro}" == "undefined" ]]; then
        local -ra choices=(
            "debian/10" $(safe "current stable release") OFF
            "debian/11" $(safe "current stable release") OFF
            "debian/12" $(safe "daily release") ON
            "ubuntu/20_04" $(safe "current stable release") OFF
            "ubuntu/22_04" $(safe "current stable release") OFF
            "ubuntu/23_04" $(safe "daily release") OFF
            "fedora/37" $(safe "current stable release") OFF
            "centos/8" $(safe "current stable release") OFF
            "centos/9" $(safe "current stable release") OFF
        )

        # shellcheck disable=SC2034
        local -rA distro_choice=(
            [title]="What distro do you want to base the template off of?"
            [backmsg]="Cloud VM Template for Proxmox Node"
            [height]=15
            [width]=58
            [radio_height]=9
            [choices]="${choices[@]}"
        )

        distro="$(ask_radiolist distro_choice)"

        if [[ "${distro}" == "${CANCELLED}" ]]; then
            clear
            log "${RED}Cancelled${RESET} the creation of a VM template. Return whenever you like."
            log ""
            exit 0
        else 
            log "- the distro will be ${distro}"
        fi
    fi

    if [[ "${storage_vol}" == "undefined" ]]; then
        local -r storage=$(pve_template_storage)
        local -a data=()
        local -a storage_choices=()
        local -A record
        json_list storage data

        for item in "${!data[@]}"; do
            eval "declare -A record=${data[item]}"
            if [[ "${#storage_choices[@]}"  -eq 0 ]]; then
                storage_choices+=(
                    "${record[storage]}" "$(safe "${record[type]} storage   ")" "ON"
                )
            else
                storage_choices+=(
                    "${record[storage]}" "$(safe "${record[type]} storage   ")" "OFF"
                )
            fi
        done

        # storage=$(strip_after "]" "$(strip_before "[" "$(pve_template_storage)")")
        # local -ra storage_options=(
        #     $(split_on "," "$storage")
        # )
        # shellcheck disable=SC2034
        local -rA ask_storage=(
            [title]="What storage volume should the template be placed in?\n\nThe storage options which are available are those which allow for the 'vztmpl' type.\n\nNOTE: even though you may have shared storage available for this, a given template can only be associated with a single Proxmox node."
            [backmsg]="Cloud VM Template for Proxmox Node"
            [height]=23 
            [radio-height]=9
            [width]=70
            [ok]="Ok"
            [cancel]="Exit"
            [choices]="${storage_choices[@]}"
        )
        storage_vol="$(ask_radiolist ask_storage)"

        if [[ "${storage_vol}" == "${CANCELLED}" ]]; then
            clear
            log "${RED}Cancelled${RESET} the creation of a VM template. Return whenever you like."
            log ""
            exit 0
        else 
            log "- the storage_vol will be ${storage_vol}"
        fi
    fi


    # shellcheck disable=SC2034
    local -rA ask_name=(
        [title]="What name would you like to give to this template?"
        [backmsg]="Cloud VM Template for Proxmox Node"
        [height]=14 
        [width]=58
        [ok]="Ok"
        [cancel]="Exit"
    )
    vm_name="template-for-${distro}"
    vm_name="$(ask_inputbox ask_name)"

    if [[ "${vm_name}" == "${CANCELLED}" ]]; then
        clear
        log "${RED}Cancelled${RESET} the creation of a VM template. Return whenever you like."
        log ""
        exit 0
    elif is_empty "${vm_name}" || starts_with "-" "${vm_name}" || starts_with "." "${vm_name}" || [[ $(length "$vm_name") -gt 62 ]]; then
        log ""
        log "${BOLD}${RED}Invalid template name: ${RESET}'${vm_name}'"
        log ""
        log "A template's name can be any alphanumeric value plus hypens, underscores, and dots where:"
        log "  - is less than 63 characters in length"
        log "  - must ${BOLD}not${NO_BOLD} start with a ${ITALIC}hyphen${NO_ITALIC} or ${ITALIC}dot${NO_ITALIC}"
        log ""
        exit 1
    fi

    #Print all of the configuration
    local -r f_cmd="${BOLD}${GREEN}"
    local -r f_env="${DIM}"
    local -r f_point="${BOLD}â†’${RESET}"
    clear
    log ""
    log "Creating VM template ${BOLD}${vm_name}${RESET} [ id: ${DIM}${vm_id}${RESET} ] based on the ${BOLD}${distro}${RESET}$(nbsp)${ITALIC}distro${NO_ITALIC}"
    log ""
    log "- template ${ITALIC}defaults${RESET} are:"
    log ""
    log "  ${f_point}  memory: ${f_cmd}${MEMORY}${RESET} [${f_env}MEMORY${RESET}], cores: ${f_cmd}${CORES}${RESET} [${f_env}CORES${RESET}]"
    log "  ${f_point}  storage vol: ${f_cmd}${storage_vol}${RESET} [${f_env}STORAGE${RESET}], storage amt: ${f_cmd}${STORAGE_AMT}${RESET} [${f_env}STORAGE_AMT${RESET}]"
    log "  ${f_point}  Host type: ${f_cmd}${HOST_TYPE}${RESET} [${f_env}NETWORK${RESET}], OS type: ${f_cmd}${OS_TYPE}${RESET} [${f_env}OS_TYPE${RESET}]"
    log "  ${f_point}  SSH Keyfile: ${f_cmd}${SSH_KEYFILE}${RESET} [${f_env}SSH_KEYFILE${RESET}], Password: ${f_cmd}${PASSWORD}${RESET}  [${f_env}PASSWORD${RESET}]"
    log ""
    log "- validate that this base for the template is acceptable (${f_env}dimmed values${RESET} are the ENV variables "
    log "  you can change for different defaults)"
    log ""

    read -r -p "Continue? <Y/n> " prompt
    if echo "$prompt" | grep -Eq "^(n|no)$"; then
        log "exiting ..."
        log ""
        exit 0
    else
        log "creating template ..."
        log ""
    fi

    # Create new VM 
    # Feel free to change any of these to your liking
    qm create "${vm_id}" --name "${vm_name}" --ostype "${OS_TYPE}" 
    #Set networking to default bridge
    qm set "${vm_id}" --net0 "virtio,bridge=${NETWORK}"
    #Set display to serial
    qm set "${vm_id}" --serial0 socket --vga serial0
    #Set memory, cpu, type defaults
    #If you are in a cluster, you might need to change cpu type
    qm set "${vm_id}" --memory "${MEMORY}" --cores "${CORES}" --cpu "${HOST_TYPE}"

    # download the cloud image file if not already present
    local -r filename=$(download_cloud_image "${distro}")
    #Set boot device to new file
    qm set "${vm_id}" --scsi0 "${storage_vol}:0,import-from=$(pwd)/${filename},discard=on"

    #Set scsi hardware as default boot disk using virtio scsi single
    qm set "${vm_id}" --boot order=scsi0 --scsihw virtio-scsi-single
    #Enable Qemu guest agent in case the guest has it available
    qm set "${vm_id}" --agent enabled=1,fstrim_cloned_disks=1
    #Add cloud-init device
    qm set "${vm_id}" --ide2 "${storage_vol}":cloudinit
    #Set CI ip config
    #IP6 = auto means SLAAC (a reliable default with no bad effects on non-IPv6 networks)
    #IP = DHCP means what it says, so leave that out entirely on non-IPv4 networks to avoid DHCP delays
    qm set "${vm_id}" --ipconfig0 "ip6=auto,ip=dhcp"
    #Import the ssh keyfile

    if [[ "${SSH_KEYFILE}" == "" ]]; then
        log "- the SSH ${ITALIC}authorized keys${RESET} will NOT be set because the SSH_KEYFILE was"
        log "  set to an empty string."
    else
        log ""
        log "- adding SSH ${ITALIC}authorized keys${RESET} for the VM template from the file: ${SSH_KEYFILE}"
        qm set "${vm_id}" --sshkeys "${SSH_KEYFILE}" > /dev/null
    fi
    # If you want to do password-based auth instaed
    # Then use this option and comment out the line above
    if [[ "${PASSWORD}" != "do-not-use" ]]; then
        log "- the PASSWORD environment variable was set; using this to provide the VM with a"
        log "  password for the user \"${VM_USER}\"."
        qm set "${vm_id}" --cipassword password
        log ""
    else
        log "- the user \"${VM_USER}\" has been created but without a password so you will need"
        log "  to use SSH keys to access the VM's based on this template"
        log ""
    fi

    #Add the user
    qm set "${vm_id}" --ciuser "${VM_USER}"

    #Resize the disk to 8G, a reasonable minimum. You can expand it more later.
    #If the disk is already bigger than 8G, this will fail, and that is okay.
    qm disk resize "${vm_id}" scsi0 "${STORAGE_AMT}"

    log "- disk resized ... making VM ID ${GREEN}${vm_id}${RESET} into a template"
    #Make it a template
    qm template "${vm_id}"
    log "Done! ðŸŽ‰"
    log ""

}

# main
if is_pve_node; then
    catch_errors
    ensure_jq
    create_template "${1:-}" "${2:-}"
else
    echo "You executed 'create-vm-template' on a non-Proxmox node!"
    echo ""
fi
